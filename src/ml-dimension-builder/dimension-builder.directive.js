(function() {
  'use strict';

  angular.module('ml-dimension-builder').directive('dimensionBuilder', [
    function DB() {
      return {
        scope: {
          data: '=dimensionBuilder',
        },

        templateUrl: '/ml-dimension-builder/BuilderDirective.html',

        link: function(scope) {

          // generated by https://gist.github.com/joemfb/b682504c7c19cd6fae11
          var aggregates = {"by-type":{"float":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"unsignedInt":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"int":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"dateTime":["max","min","count"],"gYear":["max","min","count"],"gMonth":["max","min","count"],"yearMonthDuration":["max","sum","min","count","avg"],"decimal":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"anyURI":["count"],"dayTimeDuration":["max","sum","min","count","avg"],"date":["max","min","count"],"double":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"string":["count"],"gYearMonth":["max","min","count"],"time":["max","min","count"],"point":["max","min","count"],"unsignedLong":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"long":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"gDay":["max","min","count"]},"info":{"variance-population":{"reference-arity":1},"correlation":{"reference-arity":2},"avg":{"reference-arity":1},"count":{"reference-arity":1},"min":{"reference-arity":1},"sum":{"reference-arity":1},"median":{"reference-arity":1},"stddev-population":{"reference-arity":1},"covariance":{"reference-arity":2},"stddev":{"reference-arity":1},"covariance-population":{"reference-arity":2},"max":{"reference-arity":1},"variance":{"reference-arity":1}}};

          scope.highLevelType = function(type) {
            switch(type) {
              case 'int':
              case 'unsignedInt':
              case 'long':
              case 'unsignedLong':
              case 'float':
              case 'double':
              case 'decimal':
                return 'numeric';
              default:
                return type;
            }
          };

          scope.isColumnField = function(field) {
            return scope.highLevelType(field['scalar-type']) === 'string';
          };

          scope.isComputeField = function(field) {
            return scope.highLevelType(field['scalar-type']) === 'numeric';
          };

          scope.shortName = function(field) {
            return field.localname || field['path-expression'];
          };

          scope.addColumn = function(field) {
            scope.data.serializedQuery.columns.push(field);
          };

          scope.availableFns = function(field) {
            return aggregates['by-type'][ field['scalar-type'] ].filter(function(fn) {
              //TODO: support arity=2
              return aggregates.info[ fn ]['reference-arity'] === 1;
            });
          };

          scope.addCompute = function(field, operation) {
            scope.data.serializedQuery.computes.push({
              fn: operation,
              ref: field
            });
          };

        }
      };
    }
  ]);
})();
