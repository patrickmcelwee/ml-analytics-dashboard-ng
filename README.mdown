# MarkLogic Analytics Dashboard

This AngularJS library is an adaptation of [Jianmin Liu's
analytics-dashboard](https://github.com/jianmin/analytics-dashboard), so that
it can be incorporated into any AngularJS application. It is specifically
designed with applications generated by the [MarkLogic SlushJS
generator](https://github.com/marklogic/slush-marklogic-node) in mind.

This library is a companion to the [analytics-dashboard mlpm
module](https://github.com/patrickmcelwee/mlpm-analytics-dashboard) library for
adding a BI-style dashboard to Angular applications. This library provides the
front end code driving the dashboard, while the mlpm module provides the APIs
(REST extensions and modules).

## Getting Started

    bower install ml-analytics-dashboard-ng --save

And install the [mlpm module](https://github.com/patrickmcelwee/mlpm-analytics-dashboard):

    npm install -g mlpm
    mlpm install analytics-dashboard --save

For now, you need to overwrite a module from the `group-by` mlpm library (which
is a dependency of the above `analytics-dashboard` library) to allow
constraining queries to work. To overwrite, run:

    cp bower_components/ml-analytics-dashboard-ng/group-by-json.xqy mlpm_modules/group-by/

Now you can deploy the mlpm_modules to MarkLogic:
    
    mlpm deploy -H localhost -P 8040 -u admin -p admin

For now, you also need to edit `node-server/proxy.js` in order to allow
searches with a 'multipart/mixed' Accept header. I hope to find a different way
to do this soon. For now, the `proxy` function should look like this (with the
addition of lines between the `// Analytics Dashboard` comments:

```javascript
function proxy(req, res) {
  var queryString = req.originalUrl.split('?')[1];
  var path = '/v1' + req.path + (queryString ? '?' + queryString : '');
  console.log(
    req.method + ' ' + req.path + ' proxied to ' +
    options.mlHost + ':' + options.mlHttpPort + path);
  // Analytics Dashboard
  if (queryString) {
    var querystring = require('querystring');
    var params = querystring.parse(queryString);
    var category = params.category;
    // Can use the 'category' parameter only with multipart/mixed accept.

    if (category) {
      var multipartHeader = 'multipart/mixed';
      if (req.headers.accept) {
        req.headers.accept = multipartHeader;
      } else if (req.headers.Accept) {
        req.headers.Accept = multipartHeader;
      }
    }
  }
  // end of Analytics Dashboard
  var mlReq = http.request({
    hostname: options.mlHost,
    port: options.mlHttpPort,
    method: req.method,
    path: path,
    headers: req.headers,
    auth: getAuth(options, req.session)
  }, function(response) {

    res.statusCode = response.statusCode;

    // [GJo] (#67) forward all headers from MarkLogic
    for (var header in response.headers) {
      res.header(header, response.headers[header]);
    }

    response.on('data', function(chunk) {
      res.write(chunk);
    });
    response.on('end', function() {
      res.end();
    });
  });

  req.pipe(mlReq);
  req.on('end', function() {
    mlReq.end();
  });

  mlReq.on('error', function(e) {
    console.log('Problem with request: ' + e.message);
    res.statusCode = 500;
    res.end();
  });
}
```

## Directives Provided

- `mlAnalyticsDashboard`
  -  `mlAnalyticsDashboardHome`
    - `manageMlAnalyticsDashboard`
      - `mlAnalyticsNewReport`

## Example Implementation

Add the mlAnalyticsDashboard module as a dependency to your app.module. For
example, in a [slush-generated
app](https://github.com/marklogic/slush-marklogic-node), add this to
`ui/app/app.js`:

```javascript
angular.module('app', [
   # ...
  'ml.analyticsDashboard',
  # ...
]);
```

You can embed the ml-analytics-dashboard in your UI using the mlAnalyticsDashboard directive. Simply add this to your HTML markup:

```html
  <ml-analytics-dashboard></ml-analytics-dashboard>
```

At the moment, this directive brings up a configuration screen, and it probably makes sense to have on its own page. If you are using `angular-ui-router`, as in a [slush-generated](https://github.com/marklogic/slush-marklogic-node) app, you can add a state definition in `ui/app/route/routes.js` with something like this:

```javascript
  .state('root.ml-analytics-dashboard', {
    url: '/ml-analytics-dashboard',
    template: '<ml-analytics-dashboard></ml-analytics-dashboard>'
  })
```

Then, you will probably also want to create a link to this page. For example, in
a [slush-generated](https://github.com/marklogic/slush-marklogic-node) app, you
can add the following line to the `navbar` of `ui/app/root/root.html`.

```html
  <li><a href="/ml-analytics-dashboard/home">Analytics Dashboard</a></li>
```
